<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="2020/10/28/Hexo/"/>
      <url>2020/10/28/Hexo/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="阿里云服务器购买"><a href="#阿里云服务器购买" class="headerlink" title="阿里云服务器购买"></a>阿里云服务器购买</h1><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454049.png" alt="轻量应用服务器"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454156.png" alt="工单后台"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454051.png" alt="重置密码"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454169.png" alt="SSH远程连接"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454170.png" alt="远程登录成功"></p><h1 id="备案流程"><a href="#备案流程" class="headerlink" title="备案流程"></a>备案流程</h1><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454177.png" alt="备案说明"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454052.png" alt="备案信息填写"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454053.png" alt="阿里云APP上传证件信息"></p><blockquote><p>==备案信息提交后，阿里云客服会初审，电话回访确认信息以及让提供视频备案承诺信息，提交给工信部后，工信部会发信息验证码，要求进行核验，完成后提交通管局。==</p></blockquote><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454054.png" alt="初审材料"><br><a href="https://beian.miit.gov.cn/"><br>工业和信息化部政务服务平台</a>.</p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454264.png" alt="工信部短信核验"></p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454055.png" alt="核验完成"></p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454144.png" alt="提交通管局"></p><blockquote><p>==管局审核后来未进行电话核实，一周的时间，发消息提醒备案通过==<br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454212.jpg" alt="816f070a888dcac156c6336542b5763"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454213.png" alt="宝塔面板安装"><br>==BT指令查看浏览器入口地址和密码==</p></blockquote><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454214.png"></p><blockquote><p>==注意：这里也有可能你进不去面板页面，是因为你的服务器没有开8888这个端口（具体看你的宝塔面板连接的端口），去阿里云轻量服务器控制台中的“安全”-&gt;“防火墙”，右上角的”添加规则”，添加相应的端口即可。==</p></blockquote><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454154.png" alt="放行8888端口"></p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454215.png" alt="绑定宝塔账号"></p><h1 id="七牛云图床搭建"><a href="#七牛云图床搭建" class="headerlink" title="七牛云图床搭建"></a>七牛云图床搭建</h1><h2 id="图床简介"><a href="#图床简介" class="headerlink" title="图床简介"></a>图床简介</h2><p>==图床一般是指储存图片的服务器，有国内和国外之分。 国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。 国内也分为单线空间、多线空间和cdn加速三种。==</p><h2 id="注册登录，进入控制台"><a href="#注册登录，进入控制台" class="headerlink" title="注册登录，进入控制台"></a>注册登录，进入控制台</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454220.png" alt="七牛云控制台"></p><h2 id="添加对象存储"><a href="#添加对象存储" class="headerlink" title="添加对象存储"></a>添加对象存储</h2><h2 id="新建一个存储空间"><a href="#新建一个存储空间" class="headerlink" title="新建一个存储空间"></a>新建一个存储空间</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454155.png" alt="自建空间"></p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454229.png" alt="上传文件测试"></p><h2 id="域名更换"><a href="#域名更换" class="headerlink" title="域名更换"></a>域名更换</h2><blockquote><p>==到这里我们就可以在我们的博客引用外链，显示图片了。当然也可用于公众号。<br>但是七牛云给我们使用这种链接只有一个月的时间。一个月之后就会回收域名。==</p></blockquote><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454290.png" alt="CDN测试域名"></p><blockquote><p>==用我们自己的二级域名来绑定七牛云进行访问（最好不用www开头的二级域名来绑定，因为www开头的域名，我们都是作为主域名的）==</p></blockquote><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454311.png" alt="添加备案的域名"></p><h2 id="解析二级域名、配置CNAME"><a href="#解析二级域名、配置CNAME" class="headerlink" title="解析二级域名、配置CNAME"></a>解析二级域名、配置CNAME</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454255.png" alt="复制添加二级域名的CNAME"></p><h2 id="域名厂商处添加解析"><a href="#域名厂商处添加解析" class="headerlink" title="域名厂商处添加解析"></a>域名厂商处添加解析</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454321.png"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454278.png" alt="域名解析说明"></p><h2 id="七牛云图床搭建完成"><a href="#七牛云图床搭建完成" class="headerlink" title="七牛云图床搭建完成"></a>七牛云图床搭建完成</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454340.png"></p><h2 id="小书匠编辑器绑定七牛云图床"><a href="#小书匠编辑器绑定七牛云图床" class="headerlink" title="小书匠编辑器绑定七牛云图床"></a>小书匠编辑器绑定七牛云图床</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454279.png"></p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454280.png" alt="七牛云个人中心查看密钥"></p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454561.png" alt="绑定七牛云图床"></p><h1 id="部署Hexo到阿里云"><a href="#部署Hexo到阿里云" class="headerlink" title="部署Hexo到阿里云"></a>部署Hexo到阿里云</h1><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454281.png" alt="nodejs安装"></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454487.png" alt="Git安装"></p><h2 id="Hexo概览"><a href="#Hexo概览" class="headerlink" title="Hexo概览"></a>Hexo概览</h2><ul><li>使用hexo生成静态文件</li><li>在云主机上搭建git环境，并将静态文件通过git上传到云主机</li><li>使用git-hooks实现自动部署</li><li>Nginx用做静态文件服务器，实现外界对博客的访问<br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454282.png"></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><blockquote><p>==上面环境搭建好之后，在桌面点击鼠标右键，点击 “Git Bash Here” ，输入以下指令==</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454439.png" alt="初始化Hexo"></p><p>-==scaffolds是模版文件夹，当你新建文章时，Hexo 会根据 scaffold 来建立文件==</p><p>-==source文件夹是存放用户资源的地方==</p><p>-==themes是主题文件夹，Hexo 会根据主题来生成静态页面==</p><p>输入命令行进行本地调试，即可看到初始效果</p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454440.png" alt="hexo s --debug"></p><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454537.png" alt="Hexo初始界面"></p><h2 id="更换主题为matery"><a href="#更换主题为matery" class="headerlink" title="更换主题为matery"></a>更换主题为matery</h2><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery">matery</a></li></ul><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454461.png" alt="clone matery 主题"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603869841521.png" alt="修改theme名"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866455218.png" alt="初始界面"></p><h1 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  install git</span><br></pre></td></tr></table></figure><h2 id="添加用户holy"><a href="#添加用户holy" class="headerlink" title="添加用户holy"></a>添加用户holy</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser holy</span><br></pre></td></tr></table></figure><h2 id="添加holy账户权限"><a href="#添加holy账户权限" class="headerlink" title="添加holy账户权限"></a>添加holy账户权限</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">740</span> /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454462.png" alt="vim编辑保存"></p><h2 id="改回权限"><a href="#改回权限" class="headerlink" title="改回权限"></a>改回权限</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">400</span> /etc/sudoers</span><br></pre></td></tr></table></figure><h2 id="设置holy账户密码"><a href="#设置holy账户密码" class="headerlink" title="设置holy账户密码"></a>设置holy账户密码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd holy</span><br></pre></td></tr></table></figure><blockquote><p>==输入两次密码，不可见==</p></blockquote><h2 id="切换至holy用户，创建-ssh文件夹和-ssh-authorized-key文件，并赋予相应的权限"><a href="#切换至holy用户，创建-ssh文件夹和-ssh-authorized-key文件，并赋予相应的权限" class="headerlink" title="切换至holy用户，创建/.ssh文件夹和.ssh/authorized_key文件，并赋予相应的权限"></a>切换至holy用户，创建<del>/.ssh文件夹和</del>.ssh/authorized_key文件，并赋予相应的权限</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su holy</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><blockquote><p>==接着将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys中==</p></blockquote><h2 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">600</span> /home/holy/.ssh/authorized_keys</span><br><span class="line">chmod <span class="number">700</span> /home/holy/.ssh</span><br></pre></td></tr></table></figure><h2 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h2><blockquote><p>==在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后输入你之前配置的git密码，无报错就说明好了==<br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454489.png" alt="远程登录"></p></blockquote><h2 id="添加到Windows-Terminal中"><a href="#添加到Windows-Terminal中" class="headerlink" title="添加到Windows Terminal中"></a>添加到Windows Terminal中</h2><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454441.png" alt="配置setting.json"></p><h2 id="创建仓库目录及相关配置"><a href="#创建仓库目录及相关配置" class="headerlink" title="创建仓库目录及相关配置"></a>创建仓库目录及相关配置</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><blockquote><p>==在var目录下创建repo作为Git仓库目录，返回服务端命令行切换到root账户，然后输入==</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo</span><br></pre></td></tr></table></figure><h3 id="赋予权限："><a href="#赋予权限：" class="headerlink" title="赋予权限："></a>赋予权限：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R holy:holy /var/repo</span><br><span class="line">chmod -R <span class="number">755</span> /var/repo</span><br></pre></td></tr></table></figure><blockquote><p>==接下来创建hexo目录作为网站根目录，并赋予权限：==</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/hexo</span><br><span class="line">chown -R holy:holy /var/hexo</span><br><span class="line">chmod -R <span class="number">755</span> /var/hexo</span><br></pre></td></tr></table></figure><blockquote><p>==接下来创建一个空白的git仓库==</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><h3 id="创建一个新的-Git-钩子，用于自动部署"><a href="#创建一个新的-Git-钩子，用于自动部署" class="headerlink" title="创建一个新的 Git 钩子，用于自动部署."></a>创建一个新的 Git 钩子，用于自动部署.</h3><blockquote><p>==在 /var/repo/hexo.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive==</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><h3 id="修改权限："><a href="#修改权限：" class="headerlink" title="修改权限："></a>修改权限：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R holy:holy /var/repo/hexo.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>到这里Git仓库已经搭建完毕了</p><h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454490.png"></p><h1 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h1><p><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454530.png"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454536.png" alt="修改配置文件"><br><img src="http://tc.holychen.cn/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1603866454488.png" alt="修改网站目录"></p><blockquote><p>==回到服务器终端，重启宝塔服务，使之生效==</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service bt restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器,域名,hexo,markdown,图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HOB</title>
      <link href="2020/10/28/Hob/"/>
      <url>2020/10/28/Hob/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="HOB简介"><a href="#HOB简介" class="headerlink" title="HOB简介"></a>HOB简介</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>HOB是Hand-Off Block的缩写。是PEI阶段向DXE传递系统信息的手段。PEI阶段构建一些HOB结构，然后将其作为参数传给DXE阶段函数，DXE Core会根据其使用平台相关资源。</p><p>HOB是系列的连续的内存结构体，可以认为其由三部分构成：第一部分，是PHIT头，它描述了HOB的起始地址以及总的内存使用；第二部分是各个Hob列表，DXE阶段会根据这一部分获取相关资源；第三部分是结束部分。</p><hr><p>   <img src="./images/1602726289957.png"></p><p>  <img src="./images/1602726784823.png" alt="HOB List"></p><hr><h2 id="相关Spec"><a href="#相关Spec" class="headerlink" title="相关Spec"></a>相关Spec</h2><ul><li>PI Spec(卷一 4.4 HOB Services小节，规范HOB相关的方法)</li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/unified-extensible-firmware-interface/efi-specifications-general-technology.html">EFI Spec</a>（规范HOB的数据结构）</li></ul><h1 id="HOB的数据结构表征-PiHob-h"><a href="#HOB的数据结构表征-PiHob-h" class="headerlink" title="HOB的数据结构表征(==PiHob.h==)"></a>HOB的数据结构表征(==PiHob.h==)</h1><h2 id="EFI-HOB-GENERIC-HEADER"><a href="#EFI-HOB-GENERIC-HEADER" class="headerlink" title="EFI_HOB_GENERIC_HEADER"></a>EFI_HOB_GENERIC_HEADER</h2><blockquote><p>==描述HOB内部数据的格式和大小,所有HOB都必须包含此通用HOB标头,以便可以找到下一个HOB==</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">////// Describes the format and size of the data inside the HOB./// All HOBs must contain this generic HOB header.///typedef struct &#123;  ///  /// Identifies the HOB data structure type.  ///  UINT16    HobType;  ///  /// The length in bytes of the HOB.  ///  UINT16    HobLength;  ///  /// This field must always be set to zero.  ///  UINT32    Reserved;&#125; EFI_HOB_GENERIC_HEADER;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HobType"><a href="#HobType" class="headerlink" title="HobType"></a>HobType</h2><pre><code>//// HobType of EFI_HOB_GENERIC_HEADER.//#define EFI_HOB_TYPE_HANDOFF              0x0001#define EFI_HOB_TYPE_MEMORY_ALLOCATION    0x0002#define EFI_HOB_TYPE_RESOURCE_DESCRIPTOR  0x0003#define EFI_HOB_TYPE_GUID_EXTENSION       0x0004#define EFI_HOB_TYPE_FV                   0x0005#define EFI_HOB_TYPE_CPU                  0x0006#define EFI_HOB_TYPE_MEMORY_POOL          0x0007#define EFI_HOB_TYPE_FV2                  0x0009#define EFI_HOB_TYPE_LOAD_PEIM_UNUSED     0x000A#define EFI_HOB_TYPE_UEFI_CAPSULE         0x000B#define EFI_HOB_TYPE_FV3                  0x000C#define EFI_HOB_TYPE_UNUSED               0xFFFE#define EFI_HOB_TYPE_END_OF_HOB_LIST      0xFFFF</code></pre><h2 id="PHIT-HOB"><a href="#PHIT-HOB" class="headerlink" title="PHIT HOB"></a>PHIT HOB</h2><pre><code>////// Contains general state information used by the HOB producer phase./// This HOB must be the first one in the HOB list.///typedef struct &#123;  ///  /// The HOB generic header. Header.HobType = EFI_HOB_TYPE_HANDOFF.  ///  EFI_HOB_GENERIC_HEADER  Header;  ///  /// The version number pertaining to the PHIT HOB definition.  /// This value is four bytes in length to provide an 8-byte aligned entry  /// when it is combined with the 4-byte BootMode.  ///  UINT32                  Version;  ///  /// The system boot mode as determined during the HOB producer phase.  ///  EFI_BOOT_MODE           BootMode;  ///  /// The highest address location of memory that is allocated for use by the HOB producer  /// phase. This address must be 4-KB aligned to meet page restrictions of UEFI.  ///  EFI_PHYSICAL_ADDRESS    EfiMemoryTop;  ///  /// The lowest address location of memory that is allocated for use by the HOB producer phase.  ///  EFI_PHYSICAL_ADDRESS    EfiMemoryBottom;  ///  /// The highest address location of free memory that is currently available  /// for use by the HOB producer phase.  ///  EFI_PHYSICAL_ADDRESS    EfiFreeMemoryTop;  ///  /// The lowest address location of free memory that is available for use by the HOB producer phase.  ///  EFI_PHYSICAL_ADDRESS    EfiFreeMemoryBottom;  ///  /// The end of the HOB list.  ///  EFI_PHYSICAL_ADDRESS    EfiEndOfHobList;&#125; EFI_HOB_HANDOFF_INFO_TABLE;</code></pre><h2 id="EFI-HOB-MEMORY-ALLOCATION-HEADER"><a href="#EFI-HOB-MEMORY-ALLOCATION-HEADER" class="headerlink" title="EFI_HOB_MEMORY_ALLOCATION_HEADER"></a>EFI_HOB_MEMORY_ALLOCATION_HEADER</h2><pre class="line-numbers language-C"><code class="language-C">////// EFI_HOB_MEMORY_ALLOCATION_HEADER describes the/// various attributes of the logical memory allocation. The type field will be used for/// subsequent inclusion in the UEFI memory map.///typedef struct &#123;  ///  /// A GUID that defines the memory allocation region's type and purpose, as well as  /// other fields within the memory allocation HOB. This GUID is used to define the  /// additional data within the HOB that may be present for the memory allocation HOB.  /// Type EFI_GUID is defined in InstallProtocolInterface() in the UEFI 2.0  /// specification.  ///  EFI_GUID              Name;  ///  /// The base address of memory allocated by this HOB. Type  /// EFI_PHYSICAL_ADDRESS is defined in AllocatePages() in the UEFI 2.0  /// specification.  ///  EFI_PHYSICAL_ADDRESS  MemoryBaseAddress;  ///  /// The length in bytes of memory allocated by this HOB.  ///  UINT64                MemoryLength;  ///  /// Defines the type of memory allocated by this HOB. The memory type definition  /// follows the EFI_MEMORY_TYPE definition. Type EFI_MEMORY_TYPE is defined  /// in AllocatePages() in the UEFI 2.0 specification.  ///  EFI_MEMORY_TYPE       MemoryType;  ///  /// Padding for Itanium processor family  ///  UINT8                 Reserved[4];&#125; EFI_HOB_MEMORY_ALLOCATION_HEADER;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-MEMORY-ALLOCATION"><a href="#EFI-HOB-MEMORY-ALLOCATION" class="headerlink" title="EFI_HOB_MEMORY_ALLOCATION"></a>EFI_HOB_MEMORY_ALLOCATION</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Describes all memory ranges used during the HOB producer</span><span class="token comment" spellcheck="true">/// phase that exist outside the HOB list. This HOB type</span><span class="token comment" spellcheck="true">/// describes how memory is used, not the physical attributes of memory.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_MEMORY_ALLOCATION.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER            Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// An instance of the EFI_HOB_MEMORY_ALLOCATION_HEADER that describes the</span>  <span class="token comment" spellcheck="true">/// various attributes of the logical memory allocation.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_MEMORY_ALLOCATION_HEADER  AllocDescriptor<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token comment" spellcheck="true">// Additional data pertaining to the "Name" Guid memory</span>  <span class="token comment" spellcheck="true">// may go here.</span>  <span class="token comment" spellcheck="true">//</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_MEMORY_ALLOCATION<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-MEMORY-ALLOCATION-STACK"><a href="#EFI-HOB-MEMORY-ALLOCATION-STACK" class="headerlink" title="EFI_HOB_MEMORY_ALLOCATION_STACK"></a>EFI_HOB_MEMORY_ALLOCATION_STACK</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Describes the memory stack that is produced by the HOB producer</span><span class="token comment" spellcheck="true">/// phase and upon which all post-memory-installed executable</span><span class="token comment" spellcheck="true">/// content in the HOB producer phase is executing.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_MEMORY_ALLOCATION.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER            Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// An instance of the EFI_HOB_MEMORY_ALLOCATION_HEADER that describes the</span>  <span class="token comment" spellcheck="true">/// various attributes of the logical memory allocation.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_MEMORY_ALLOCATION_HEADER  AllocDescriptor<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_MEMORY_ALLOCATION_STACK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-MEMORY-ALLOCATION-BSP-STORE"><a href="#EFI-HOB-MEMORY-ALLOCATION-BSP-STORE" class="headerlink" title="EFI_HOB_MEMORY_ALLOCATION_BSP_STORE"></a>EFI_HOB_MEMORY_ALLOCATION_BSP_STORE</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Defines the location of the boot-strap</span><span class="token comment" spellcheck="true">/// processor (BSP) BSPStore ("Backing Store Pointer Store").</span><span class="token comment" spellcheck="true">/// This HOB is valid for the Itanium processor family only</span><span class="token comment" spellcheck="true">/// register overflow store.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_MEMORY_ALLOCATION.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER            Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// An instance of the EFI_HOB_MEMORY_ALLOCATION_HEADER that describes the</span>  <span class="token comment" spellcheck="true">/// various attributes of the logical memory allocation.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_MEMORY_ALLOCATION_HEADER  AllocDescriptor<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_MEMORY_ALLOCATION_BSP_STORE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-MEMORY-ALLOCATION-MODULE"><a href="#EFI-HOB-MEMORY-ALLOCATION-MODULE" class="headerlink" title="EFI_HOB_MEMORY_ALLOCATION_MODULE"></a>EFI_HOB_MEMORY_ALLOCATION_MODULE</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Defines the location and entry point of the HOB consumer phase.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_MEMORY_ALLOCATION.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER            Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// An instance of the EFI_HOB_MEMORY_ALLOCATION_HEADER that describes the</span>  <span class="token comment" spellcheck="true">/// various attributes of the logical memory allocation.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_MEMORY_ALLOCATION_HEADER  MemoryAllocationHeader<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The GUID specifying the values of the firmware file system name</span>  <span class="token comment" spellcheck="true">/// that contains the HOB consumer phase component.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_GUID                          ModuleName<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The address of the memory-mapped firmware volume</span>  <span class="token comment" spellcheck="true">/// that contains the HOB consumer phase firmware file.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_PHYSICAL_ADDRESS              EntryPoint<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_MEMORY_ALLOCATION_MODULE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-RESOURCE-DESCRIPTOR"><a href="#EFI-HOB-RESOURCE-DESCRIPTOR" class="headerlink" title="EFI_HOB_RESOURCE_DESCRIPTOR"></a>EFI_HOB_RESOURCE_DESCRIPTOR</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Describes the resource properties of all fixed,</span><span class="token comment" spellcheck="true">/// nonrelocatable resource ranges found on the processor</span><span class="token comment" spellcheck="true">/// host bus during the HOB producer phase.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_RESOURCE_DESCRIPTOR.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER      Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// A GUID representing the owner of the resource. This GUID is used by HOB</span>  <span class="token comment" spellcheck="true">/// consumer phase components to correlate device ownership of a resource.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_GUID                    Owner<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The resource type enumeration as defined by EFI_RESOURCE_TYPE.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_RESOURCE_TYPE           ResourceType<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// Resource attributes as defined by EFI_RESOURCE_ATTRIBUTE_TYPE.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_RESOURCE_ATTRIBUTE_TYPE ResourceAttribute<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The physical start address of the resource region.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_PHYSICAL_ADDRESS        PhysicalStart<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The number of bytes of the resource region.</span>  <span class="token comment" spellcheck="true">///</span>  UINT64                      ResourceLength<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_RESOURCE_DESCRIPTOR<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-GUID-TYPE"><a href="#EFI-HOB-GUID-TYPE" class="headerlink" title="EFI_HOB_GUID_TYPE"></a>EFI_HOB_GUID_TYPE</h2><pre class="line-numbers language-c///"><code class="language-c///">/// Allows writers of executable content in the HOB producer phase to/// maintain and manage HOBs with specific GUID.///typedef struct &#123;  ///  /// The HOB generic header. Header.HobType = EFI_HOB_TYPE_GUID_EXTENSION.  ///  EFI_HOB_GENERIC_HEADER      Header;  ///  /// A GUID that defines the contents of this HOB.  ///  EFI_GUID                    Name;  //  // Guid specific data goes here  //&#125; EFI_HOB_GUID_TYPE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-FIRMWARE-VOLUME"><a href="#EFI-HOB-FIRMWARE-VOLUME" class="headerlink" title="EFI_HOB_FIRMWARE_VOLUME"></a>EFI_HOB_FIRMWARE_VOLUME</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Details the location of firmware volumes that contain firmware files.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_FV.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The physical memory-mapped base address of the firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_PHYSICAL_ADDRESS   BaseAddress<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The length in bytes of the firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  UINT64                 Length<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_FIRMWARE_VOLUME<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-FIRMWARE-VOLUME2"><a href="#EFI-HOB-FIRMWARE-VOLUME2" class="headerlink" title="EFI_HOB_FIRMWARE_VOLUME2"></a>EFI_HOB_FIRMWARE_VOLUME2</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Details the location of a firmware volume that was extracted</span><span class="token comment" spellcheck="true">/// from a file within another firmware volume.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_FV2.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER  Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The physical memory-mapped base address of the firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_PHYSICAL_ADDRESS    BaseAddress<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The length in bytes of the firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  UINT64                  Length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The name of the firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_GUID                FvName<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The name of the firmware file that contained this firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_GUID                FileName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_FIRMWARE_VOLUME2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-FIRMWARE-VOLUME3"><a href="#EFI-HOB-FIRMWARE-VOLUME3" class="headerlink" title="EFI_HOB_FIRMWARE_VOLUME3"></a>EFI_HOB_FIRMWARE_VOLUME3</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Details the location of a firmware volume that was extracted</span><span class="token comment" spellcheck="true">/// from a file within another firmware volume.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_FV3.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER  Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The physical memory-mapped base address of the firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_PHYSICAL_ADDRESS    BaseAddress<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The length in bytes of the firmware volume.</span>  <span class="token comment" spellcheck="true">///</span>  UINT64                  Length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The authentication status.</span>  <span class="token comment" spellcheck="true">///</span>  UINT32                  AuthenticationStatus<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// TRUE if the FV was extracted as a file within another firmware volume.</span>  <span class="token comment" spellcheck="true">/// FALSE otherwise.</span>  <span class="token comment" spellcheck="true">///</span>  BOOLEAN                 ExtractedFv<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The name of the firmware volume.</span>  <span class="token comment" spellcheck="true">/// Valid only if IsExtractedFv is TRUE.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_GUID                FvName<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The name of the firmware file that contained this firmware volume.</span>  <span class="token comment" spellcheck="true">/// Valid only if IsExtractedFv is TRUE.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_GUID                FileName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_FIRMWARE_VOLUME3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-CPU"><a href="#EFI-HOB-CPU" class="headerlink" title="EFI_HOB_CPU"></a>EFI_HOB_CPU</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Describes processor information, such as address space and I/O space capabilities.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_CPU.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER  Header<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// Identifies the maximum physical memory addressability of the processor.</span>  <span class="token comment" spellcheck="true">///</span>  UINT8                   SizeOfMemorySpace<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// Identifies the maximum physical I/O addressability of the processor.</span>  <span class="token comment" spellcheck="true">///</span>  UINT8                   SizeOfIoSpace<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// This field will always be set to zero.</span>  <span class="token comment" spellcheck="true">///</span>  UINT8                   Reserved<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_CPU<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-MEMORY-POOL"><a href="#EFI-HOB-MEMORY-POOL" class="headerlink" title="EFI_HOB_MEMORY_POOL"></a>EFI_HOB_MEMORY_POOL</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Describes pool memory allocations.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The HOB generic header. Header.HobType = EFI_HOB_TYPE_MEMORY_POOL.</span>  <span class="token comment" spellcheck="true">///</span>  EFI_HOB_GENERIC_HEADER  Header<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_HOB_MEMORY_POOL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-HOB-UEFI-CAPSULE"><a href="#EFI-HOB-UEFI-CAPSULE" class="headerlink" title="EFI_HOB_UEFI_CAPSULE"></a>EFI_HOB_UEFI_CAPSULE</h2><pre class="line-numbers language-c///"><code class="language-c///">/// Each UEFI capsule HOB details the location of a UEFI capsule. It includes a base address and length/// which is based upon memory blocks with a EFI_CAPSULE_HEADER and the associated/// CapsuleImageSize-based payloads. These HOB's shall be created by the PEI PI firmware/// sometime after the UEFI UpdateCapsule service invocation with the/// CAPSULE_FLAGS_POPULATE_SYSTEM_TABLE flag set in the EFI_CAPSULE_HEADER.///typedef struct &#123;  ///  /// The HOB generic header where Header.HobType = EFI_HOB_TYPE_UEFI_CAPSULE.  ///  EFI_HOB_GENERIC_HEADER Header;  ///  /// The physical memory-mapped base address of an UEFI capsule. This value is set to  /// point to the base of the contiguous memory of the UEFI capsule.  /// The length of the contiguous memory in bytes.  ///  EFI_PHYSICAL_ADDRESS   BaseAddress;  UINT64                 Length;&#125; EFI_HOB_UEFI_CAPSULE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EFI-PEI-HOB-POINTERS"><a href="#EFI-PEI-HOB-POINTERS" class="headerlink" title="EFI_PEI_HOB_POINTERS"></a>EFI_PEI_HOB_POINTERS</h2><blockquote><p>==使用union最大的好处是提高源码的可读性和间接性。利用该类型中所有域的取值均一样的特点，在不同的使用方法下，可以使用不同的变量名字，一方面可以省去强制类型转换的麻烦，另一方面可以直接体现出当前的使用需求。==</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Union of all the possible HOB Types.</span><span class="token comment" spellcheck="true">///</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  EFI_HOB_GENERIC_HEADER              <span class="token operator">*</span>Header<span class="token punctuation">;</span>  EFI_HOB_HANDOFF_INFO_TABLE          <span class="token operator">*</span>HandoffInformationTable<span class="token punctuation">;</span>  EFI_HOB_MEMORY_ALLOCATION           <span class="token operator">*</span>MemoryAllocation<span class="token punctuation">;</span>  EFI_HOB_MEMORY_ALLOCATION_BSP_STORE <span class="token operator">*</span>MemoryAllocationBspStore<span class="token punctuation">;</span>  EFI_HOB_MEMORY_ALLOCATION_STACK     <span class="token operator">*</span>MemoryAllocationStack<span class="token punctuation">;</span>  EFI_HOB_MEMORY_ALLOCATION_MODULE    <span class="token operator">*</span>MemoryAllocationModule<span class="token punctuation">;</span>  EFI_HOB_RESOURCE_DESCRIPTOR         <span class="token operator">*</span>ResourceDescriptor<span class="token punctuation">;</span>  EFI_HOB_GUID_TYPE                   <span class="token operator">*</span>Guid<span class="token punctuation">;</span>  EFI_HOB_FIRMWARE_VOLUME             <span class="token operator">*</span>FirmwareVolume<span class="token punctuation">;</span>  EFI_HOB_FIRMWARE_VOLUME2            <span class="token operator">*</span>FirmwareVolume2<span class="token punctuation">;</span>  EFI_HOB_FIRMWARE_VOLUME3            <span class="token operator">*</span>FirmwareVolume3<span class="token punctuation">;</span>  EFI_HOB_CPU                         <span class="token operator">*</span>Cpu<span class="token punctuation">;</span>  EFI_HOB_MEMORY_POOL                 <span class="token operator">*</span>Pool<span class="token punctuation">;</span>  EFI_HOB_UEFI_CAPSULE                <span class="token operator">*</span>Capsule<span class="token punctuation">;</span>  UINT8                               <span class="token operator">*</span>Raw<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> EFI_PEI_HOB_POINTERS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="HOB相关方法的声明（-HobLib-h-）"><a href="#HOB相关方法的声明（-HobLib-h-）" class="headerlink" title="HOB相关方法的声明（==HobLib.h==）"></a>HOB相关方法的声明（==HobLib.h==）</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><ul><li>==BuildModuleHob==</li><li>==BuildResourceDescriptorWithOwnerHob==</li><li>==BuildResourceDescriptorHob==</li><li>==BuildGuidHob==</li><li>==BuildGuidDataHob==</li><li>==BuildFvHob==</li><li>==BuildFv2Hob==</li><li>==BuildFv3Hob==</li><li>==BuildCvHob==</li><li>==BuildCpuHob==</li><li>==BuildStackHob==</li><li>==BuildBspStoreHob==</li><li>==BuildMemoryAllocationHob==</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Builds a HOB for a loaded PE32 module.  This function builds a HOB for a loaded PE32 module.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If ModuleName is NULL, then ASSERT().  If there is no additional space for HOB creation, then ASSERT().  @param  ModuleName              The GUID File Name of the module.  @param  MemoryAllocationModule  The 64 bit physical address of the module.  @param  ModuleLength            The length of the module in bytes.  @param  EntryPoint              The 64 bit physical address of the module entry point.**/</span>VOIDEFIAPI<span class="token function">BuildModuleHob</span> <span class="token punctuation">(</span>  IN CONST EFI_GUID         <span class="token operator">*</span>ModuleName<span class="token punctuation">,</span>  IN EFI_PHYSICAL_ADDRESS   MemoryAllocationModule<span class="token punctuation">,</span>  IN UINT64                 ModuleLength<span class="token punctuation">,</span>  IN EFI_PHYSICAL_ADDRESS   EntryPoint  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a HOB that describes a chunk of system memory with Owner GUID.  This function builds a HOB that describes a chunk of system memory.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  @param  ResourceType        The type of resource described by this HOB.  @param  ResourceAttribute   The resource attributes of the memory described by this HOB.  @param  PhysicalStart       The 64 bit physical address of memory described by this HOB.  @param  NumberOfBytes       The length of the memory described by this HOB in bytes.  @param  OwnerGUID           GUID for the owner of this resource.**/</span>VOIDEFIAPI<span class="token function">BuildResourceDescriptorWithOwnerHob</span> <span class="token punctuation">(</span>  IN EFI_RESOURCE_TYPE            ResourceType<span class="token punctuation">,</span>  IN EFI_RESOURCE_ATTRIBUTE_TYPE  ResourceAttribute<span class="token punctuation">,</span>  IN EFI_PHYSICAL_ADDRESS         PhysicalStart<span class="token punctuation">,</span>  IN UINT64                       NumberOfBytes<span class="token punctuation">,</span>  IN EFI_GUID                     <span class="token operator">*</span>OwnerGUID  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a HOB that describes a chunk of system memory.  This function builds a HOB that describes a chunk of system memory.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  @param  ResourceType        The type of resource described by this HOB.  @param  ResourceAttribute   The resource attributes of the memory described by this HOB.  @param  PhysicalStart       The 64 bit physical address of memory described by this HOB.  @param  NumberOfBytes       The length of the memory described by this HOB in bytes.**/</span>VOIDEFIAPI<span class="token function">BuildResourceDescriptorHob</span> <span class="token punctuation">(</span>  IN EFI_RESOURCE_TYPE            ResourceType<span class="token punctuation">,</span>  IN EFI_RESOURCE_ATTRIBUTE_TYPE  ResourceAttribute<span class="token punctuation">,</span>  IN EFI_PHYSICAL_ADDRESS         PhysicalStart<span class="token punctuation">,</span>  IN UINT64                       NumberOfBytes  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a customized HOB tagged with a GUID for identification and returns  the start address of GUID HOB data.  This function builds a customized HOB tagged with a GUID for identification  and returns the start address of GUID HOB data so that caller can fill the customized data.  The HOB Header and Name field is already stripped.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If Guid is NULL, then ASSERT().  If there is no additional space for HOB creation, then ASSERT().  If DataLength > (0xFFF8 - sizeof (EFI_HOB_GUID_TYPE)), then ASSERT().  HobLength is UINT16 and multiples of 8 bytes, so the max HobLength is 0xFFF8.  @param  Guid          The GUID to tag the customized HOB.  @param  DataLength    The size of the data payload for the GUID HOB.  @retval  NULL         The GUID HOB could not be allocated.  @retval  others       The start address of GUID HOB data.**/</span>VOID <span class="token operator">*</span>EFIAPI<span class="token function">BuildGuidHob</span> <span class="token punctuation">(</span>  IN CONST EFI_GUID              <span class="token operator">*</span>Guid<span class="token punctuation">,</span>  IN UINTN                       DataLength  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a customized HOB tagged with a GUID for identification, copies the input data to the HOB  data field, and returns the start address of the GUID HOB data.  This function builds a customized HOB tagged with a GUID for identification and copies the input  data to the HOB data field and returns the start address of the GUID HOB data.  It can only be  invoked during PEI phase; for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  The HOB Header and Name field is already stripped.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If Guid is NULL, then ASSERT().  If Data is NULL and DataLength > 0, then ASSERT().  If there is no additional space for HOB creation, then ASSERT().  If DataLength > (0xFFF8 - sizeof (EFI_HOB_GUID_TYPE)), then ASSERT().  HobLength is UINT16 and multiples of 8 bytes, so the max HobLength is 0xFFF8.  @param  Guid          The GUID to tag the customized HOB.  @param  Data          The data to be copied into the data field of the GUID HOB.  @param  DataLength    The size of the data payload for the GUID HOB.  @retval  NULL         The GUID HOB could not be allocated.  @retval  others       The start address of GUID HOB data.**/</span>VOID <span class="token operator">*</span>EFIAPI<span class="token function">BuildGuidDataHob</span> <span class="token punctuation">(</span>  IN CONST EFI_GUID              <span class="token operator">*</span>Guid<span class="token punctuation">,</span>  IN VOID                        <span class="token operator">*</span>Data<span class="token punctuation">,</span>  IN UINTN                       DataLength  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a Firmware Volume HOB.  This function builds a Firmware Volume HOB.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  If the FvImage buffer is not at its required alignment, then ASSERT().  @param  BaseAddress   The base address of the Firmware Volume.  @param  Length        The size of the Firmware Volume in bytes.**/</span>VOIDEFIAPI<span class="token function">BuildFvHob</span> <span class="token punctuation">(</span>  IN EFI_PHYSICAL_ADDRESS        BaseAddress<span class="token punctuation">,</span>  IN UINT64                      Length  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a EFI_HOB_TYPE_FV2 HOB.  This function builds a EFI_HOB_TYPE_FV2 HOB.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  If the FvImage buffer is not at its required alignment, then ASSERT().  @param  BaseAddress   The base address of the Firmware Volume.  @param  Length        The size of the Firmware Volume in bytes.  @param  FvName        The name of the Firmware Volume.  @param  FileName      The name of the file.**/</span>VOIDEFIAPI<span class="token function">BuildFv2Hob</span> <span class="token punctuation">(</span>  IN          EFI_PHYSICAL_ADDRESS        BaseAddress<span class="token punctuation">,</span>  IN          UINT64                      Length<span class="token punctuation">,</span>  IN CONST    EFI_GUID                    <span class="token operator">*</span>FvName<span class="token punctuation">,</span>  IN CONST    EFI_GUID                    <span class="token operator">*</span>FileName  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a EFI_HOB_TYPE_FV3 HOB.  This function builds a EFI_HOB_TYPE_FV3 HOB.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  If the FvImage buffer is not at its required alignment, then ASSERT().  @param BaseAddress            The base address of the Firmware Volume.  @param Length                 The size of the Firmware Volume in bytes.  @param AuthenticationStatus   The authentication status.  @param ExtractedFv            TRUE if the FV was extracted as a file within                                another firmware volume. FALSE otherwise.  @param FvName                 The name of the Firmware Volume.                                Valid only if IsExtractedFv is TRUE.  @param FileName               The name of the file.                                Valid only if IsExtractedFv is TRUE.**/</span>VOIDEFIAPI<span class="token function">BuildFv3Hob</span> <span class="token punctuation">(</span>  IN          EFI_PHYSICAL_ADDRESS        BaseAddress<span class="token punctuation">,</span>  IN          UINT64                      Length<span class="token punctuation">,</span>  IN          UINT32                      AuthenticationStatus<span class="token punctuation">,</span>  IN          BOOLEAN                     ExtractedFv<span class="token punctuation">,</span>  IN CONST    EFI_GUID                    <span class="token operator">*</span>FvName<span class="token punctuation">,</span> OPTIONAL  IN CONST    EFI_GUID                    <span class="token operator">*</span>FileName OPTIONAL  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a Capsule Volume HOB.  This function builds a Capsule Volume HOB.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If the platform does not support Capsule Volume HOBs, then ASSERT().  If there is no additional space for HOB creation, then ASSERT().  @param  BaseAddress   The base address of the Capsule Volume.  @param  Length        The size of the Capsule Volume in bytes.**/</span>VOIDEFIAPI<span class="token function">BuildCvHob</span> <span class="token punctuation">(</span>  IN EFI_PHYSICAL_ADDRESS        BaseAddress<span class="token punctuation">,</span>  IN UINT64                      Length  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a HOB for the CPU.  This function builds a HOB for the CPU.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  @param  SizeOfMemorySpace   The maximum physical memory addressability of the processor.  @param  SizeOfIoSpace       The maximum physical I/O addressability of the processor.**/</span>VOIDEFIAPI<span class="token function">BuildCpuHob</span> <span class="token punctuation">(</span>  IN UINT8                       SizeOfMemorySpace<span class="token punctuation">,</span>  IN UINT8                       SizeOfIoSpace  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a HOB for the Stack.  This function builds a HOB for the stack.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  @param  BaseAddress   The 64 bit physical address of the Stack.  @param  Length        The length of the stack in bytes.**/</span>VOIDEFIAPI<span class="token function">BuildStackHob</span> <span class="token punctuation">(</span>  IN EFI_PHYSICAL_ADDRESS        BaseAddress<span class="token punctuation">,</span>  IN UINT64                      Length  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a HOB for the BSP store.  This function builds a HOB for BSP store.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  @param  BaseAddress   The 64 bit physical address of the BSP.  @param  Length        The length of the BSP store in bytes.  @param  MemoryType    Type of memory allocated by this HOB.**/</span>VOIDEFIAPI<span class="token function">BuildBspStoreHob</span> <span class="token punctuation">(</span>  IN EFI_PHYSICAL_ADDRESS        BaseAddress<span class="token punctuation">,</span>  IN UINT64                      Length<span class="token punctuation">,</span>  IN EFI_MEMORY_TYPE             MemoryType  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Builds a HOB for the memory allocation.  This function builds a HOB for the memory allocation.  It can only be invoked during PEI phase;  for DXE phase, it will ASSERT() since PEI HOB is read-only for DXE phase.  If there is no additional space for HOB creation, then ASSERT().  @param  BaseAddress   The 64 bit physical address of the memory.  @param  Length        The length of the memory allocation in bytes.  @param  MemoryType    Type of memory allocated by this HOB.**/</span>VOIDEFIAPI<span class="token function">BuildMemoryAllocationHob</span> <span class="token punctuation">(</span>  IN EFI_PHYSICAL_ADDRESS        BaseAddress<span class="token punctuation">,</span>  IN UINT64                      Length<span class="token punctuation">,</span>  IN EFI_MEMORY_TYPE             MemoryType  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><blockquote><p>==无此方法==</p></blockquote><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><ul><li><p>==GetHobList==</p></li><li><p>==GetNextHob==</p></li><li><p>==GetFirstHob==</p></li><li><p>==GetFirstGuidHob==</p></li><li><p>==GetNextGuidHob==</p></li><li><p>==GetBootModeHob==</p><pre class="line-numbers language-c"><code class="language-c"><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>Returns the pointer to the HOB list<span class="token punctuation">.</span>This function returns the pointer to first HOB in the list<span class="token punctuation">.</span>For PEI phase<span class="token punctuation">,</span> the PEI service <span class="token function">GetHobList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> can be used to retrieve the pointerto the HOB list<span class="token punctuation">.</span>  For the DXE phase<span class="token punctuation">,</span> the HOB list pointer can be retrieved throughthe EFI System Table by looking up theHOB list GUID in the System Configuration Table<span class="token punctuation">.</span>Since the System Configuration Table does not exist that the time the DXE Core islaunched<span class="token punctuation">,</span> the DXE Core uses a global variable from the DXE Core Entry Point Libraryto manage the pointer to the HOB list<span class="token punctuation">.</span>If the pointer to the HOB list is <span class="token constant">NULL</span><span class="token punctuation">,</span> then <span class="token function">ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>@<span class="token keyword">return</span> The pointer to the HOB list<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>**/<br>VOID *<br>EFIAPI<br>GetHobList (<br>  VOID<br>  );</p><p>/**<br>  Returns the next instance of a HOB type from the starting HOB.</p><p>  This function searches the first instance of a HOB type from the starting HOB pointer.<br>  If there does not exist such HOB type from the starting HOB pointer, it will return NULL.<br>  In contrast with macro GET_NEXT_HOB(), this function does not skip the starting HOB pointer<br>  unconditionally: it returns HobStart back if HobStart itself meets the requirement;<br>  caller is required to use GET_NEXT_HOB() if it wishes to skip current HobStart.</p><p>  If HobStart is NULL, then ASSERT().</p><p>  @param  Type          The HOB type to return.<br>  @param  HobStart      The starting HOB pointer to search from.</p><p>  @return The next instance of a HOB type from the starting HOB.</p><p>**/<br>VOID *<br>EFIAPI<br>GetNextHob (<br>  IN UINT16                 Type,<br>  IN CONST VOID             *HobStart<br>  );</p><p>/**<br>  Returns the first instance of a HOB type among the whole HOB list.</p><p>  This function searches the first instance of a HOB type among the whole HOB list.<br>  If there does not exist such HOB type in the HOB list, it will return NULL.</p><p>  If the pointer to the HOB list is NULL, then ASSERT().</p><p>  @param  Type          The HOB type to return.</p><p>  @return The next instance of a HOB type from the starting HOB.</p><p>**/<br>VOID *<br>EFIAPI<br>GetFirstHob (<br>  IN UINT16                 Type<br>  );</p><p>/**<br>  Returns the next instance of the matched GUID HOB from the starting HOB.</p><p>  This function searches the first instance of a HOB from the starting HOB pointer.<br>  Such HOB should satisfy two conditions:<br>  its HOB type is EFI_HOB_TYPE_GUID_EXTENSION and its GUID Name equals to the input Guid.<br>  If there does not exist such HOB from the starting HOB pointer, it will return NULL.<br>  Caller is required to apply GET_GUID_HOB_DATA () and GET_GUID_HOB_DATA_SIZE ()<br>  to extract the data section and its size info respectively.<br>  In contrast with macro GET_NEXT_HOB(), this function does not skip the starting HOB pointer<br>  unconditionally: it returns HobStart back if HobStart itself meets the requirement;<br>  caller is required to use GET_NEXT_HOB() if it wishes to skip current HobStart.</p><p>  If Guid is NULL, then ASSERT().<br>  If HobStart is NULL, then ASSERT().</p><p>  @param  Guid          The GUID to match with in the HOB list.<br>  @param  HobStart      A pointer to a Guid.</p><p>  @return The next instance of the matched GUID HOB from the starting HOB.</p><p>**/<br>VOID *<br>EFIAPI<br>GetNextGuidHob (<br>  IN CONST EFI_GUID         *Guid,<br>  IN CONST VOID             *HobStart<br>  );</p><p>/**<br>  Returns the first instance of the matched GUID HOB among the whole HOB list.</p><p>  This function searches the first instance of a HOB among the whole HOB list.<br>  Such HOB should satisfy two conditions:<br>  its HOB type is EFI_HOB_TYPE_GUID_EXTENSION and its GUID Name equals to the input Guid.<br>  If there does not exist such HOB from the starting HOB pointer, it will return NULL.<br>  Caller is required to apply GET_GUID_HOB_DATA () and GET_GUID_HOB_DATA_SIZE ()<br>  to extract the data section and its size info respectively.</p><p>  If the pointer to the HOB list is NULL, then ASSERT().<br>  If Guid is NULL, then ASSERT().</p><p>  @param  Guid          The GUID to match with in the HOB list.</p><p>  @return The first instance of the matched GUID HOB among the whole HOB list.</p><p>**/<br>VOID *<br>EFIAPI<br>GetFirstGuidHob (<br>  IN CONST EFI_GUID         *Guid<br>  );</p><p>/**<br>  Get the system boot mode from the HOB list.</p><p>  This function returns the system boot mode information from the<br>  PHIT HOB in HOB list.</p><p>  If the pointer to the HOB list is NULL, then ASSERT().</p><p>  @param  VOID</p><p>  @return The Boot Mode.</p><p>**/<br>EFI_BOOT_MODE<br>EFIAPI<br>GetBootModeHob (<br>  VOID<br>  );</p><pre><code>## 改&gt; ==未提供方法，一般是先找到感兴趣的Hob，再修改Block中的数据==----# HOB相关接口的实现- ==HobLib.h #F44336==- ==MdePkg\Library\PeiHobLib\HobLib.c #F44336==- ==MdePkg\Library\DxeHobLib\HobLib.c #F44336==- ==MdePkg\Library\DxeCoreHobLib\HobLib.c #F44336==- ==IntelFrameworkPkg\Library\PeiHobLibFramework\HobLib.c #F44336==## 相关宏函数- ==GET_HOB_TYPE==- ==GET_HOB_LENGTH==- ==GET_NEXT_HOB==- ==END_OF_HOB_LIST==- ==GET_GUID_HOB_DATA==- ==GET_GUID_HOB_DATA_SIZE==```c/**  Returns the type of a HOB.  This macro returns the HobType field from the HOB header for the  HOB specified by HobStart.  @param  HobStart   A pointer to a HOB.  @return HobType.**/#define GET_HOB_TYPE(HobStart) \  ((*(EFI_HOB_GENERIC_HEADER **)&amp;(HobStart))-&gt;HobType)/**  Returns the length, in bytes, of a HOB.  This macro returns the HobLength field from the HOB header for the  HOB specified by HobStart.  @param  HobStart   A pointer to a HOB.  @return HobLength.**/#define GET_HOB_LENGTH(HobStart) \  ((*(EFI_HOB_GENERIC_HEADER **)&amp;(HobStart))-&gt;HobLength)/**  Returns a pointer to the next HOB in the HOB list.  This macro returns a pointer to HOB that follows the  HOB specified by HobStart in the HOB List.  @param  HobStart   A pointer to a HOB.  @return A pointer to the next HOB in the HOB list.**/#define GET_NEXT_HOB(HobStart) \  (VOID *)(*(UINT8 **)&amp;(HobStart) + GET_HOB_LENGTH (HobStart))/**  Determines if a HOB is the last HOB in the HOB list.  This macro determine if the HOB specified by HobStart is the  last HOB in the HOB list.  If HobStart is last HOB in the HOB list,  then TRUE is returned.  Otherwise, FALSE is returned.  @param  HobStart   A pointer to a HOB.  @retval TRUE       The HOB specified by HobStart is the last HOB in the HOB list.  @retval FALSE      The HOB specified by HobStart is not the last HOB in the HOB list.**/#define END_OF_HOB_LIST(HobStart)  (GET_HOB_TYPE (HobStart) == (UINT16)EFI_HOB_TYPE_END_OF_HOB_LIST)/**  Returns a pointer to data buffer from a HOB of type EFI_HOB_TYPE_GUID_EXTENSION.  This macro returns a pointer to the data buffer in a HOB specified by HobStart.  HobStart is assumed to be a HOB of type EFI_HOB_TYPE_GUID_EXTENSION.  @param   GuidHob   A pointer to a HOB.  @return  A pointer to the data buffer in a HOB.**/#define GET_GUID_HOB_DATA(HobStart) \  (VOID *)(*(UINT8 **)&amp;(HobStart) + sizeof (EFI_HOB_GUID_TYPE))/**  Returns the size of the data buffer from a HOB of type EFI_HOB_TYPE_GUID_EXTENSION.  This macro returns the size, in bytes, of the data buffer in a HOB specified by HobStart.  HobStart is assumed to be a HOB of type EFI_HOB_TYPE_GUID_EXTENSION.  @param   GuidHob   A pointer to a HOB.  @return  The size of the data buffer.**/#define GET_GUID_HOB_DATA_SIZE(HobStart) \  (UINT16)(GET_HOB_LENGTH (HobStart) - sizeof (EFI_HOB_GUID_TYPE))</code></pre><h2 id="CreateHob-仅PEI阶段有效"><a href="#CreateHob-仅PEI阶段有效" class="headerlink" title="CreateHob(仅PEI阶段有效)"></a>CreateHob(仅PEI阶段有效)</h2><ul><li>==MdeModulePkg\Core\Pei\PeiMain.h==</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Add a new HOB to the HOB List.  @param PeiServices        An indirect pointer to the EFI_PEI_SERVICES table published by the PEI Foundation.  @param Type               Type of the new HOB.  @param Length             Length of the new HOB to allocate.  @param Hob                Pointer to the new HOB.  @return  EFI_SUCCESS           Success to create hob.  @retval  EFI_INVALID_PARAMETER if Hob is NULL  @retval  EFI_NOT_AVAILABLE_YET if HobList is still not available.  @retval  EFI_OUT_OF_RESOURCES  if there is no more memory to grow the Hoblist.**/</span>EFI_STATUSEFIAPI<span class="token function">PeiCreateHob</span> <span class="token punctuation">(</span>  IN CONST EFI_PEI_SERVICES  <span class="token operator">*</span><span class="token operator">*</span>PeiServices<span class="token punctuation">,</span>  IN UINT16            Type<span class="token punctuation">,</span>  IN UINT16            Length<span class="token punctuation">,</span>  IN OUT VOID          <span class="token operator">*</span><span class="token operator">*</span>Hob  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>==MdeModulePkg\Core\Pei\Hob\Hob.c==</p><pre class="line-numbers language-c"><code class="language-c"><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>Add a new HOB to the HOB List<span class="token punctuation">.</span>@param PeiServices      An indirect pointer to the EFI_PEI_SERVICES table published by the PEI Foundation<span class="token punctuation">.</span>@param Type             Type of the new HOB<span class="token punctuation">.</span>@param Length           Length of the new HOB to allocate<span class="token punctuation">.</span>@param Hob              Pointer to the new HOB<span class="token punctuation">.</span>@<span class="token keyword">return</span>  EFI_SUCCESS           Success to create hob<span class="token punctuation">.</span>@retval  EFI_INVALID_PARAMETER <span class="token keyword">if</span> Hob is <span class="token constant">NULL</span>@retval  EFI_NOT_AVAILABLE_YET <span class="token keyword">if</span> HobList is still not available<span class="token punctuation">.</span>@retval  EFI_OUT_OF_RESOURCES  <span class="token keyword">if</span> there is no more memory to grow the Hoblist<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>**/<br>EFI_STATUS<br>EFIAPI<br>PeiCreateHob (<br>  IN CONST EFI_PEI_SERVICES  **PeiServices,<br>  IN UINT16            Type,<br>  IN UINT16            Length,<br>  IN OUT VOID          **Hob<br>  )<br>{<br>  EFI_STATUS                           Status;<br>  EFI_HOB_HANDOFF_INFO_TABLE           *HandOffHob;<br>  EFI_HOB_GENERIC_HEADER               *HobEnd;<br>  EFI_PHYSICAL_ADDRESS                 FreeMemory;</p><p>  Status = PeiGetHobList (PeiServices, Hob);<br>  if (EFI_ERROR(Status)) {<br>    return Status;<br>  }</p><p>  HandOffHob = *Hob;</p><p>  //<br>  // Check Length to avoid data overflow.<br>  //<br>  if (0x10000 - Length &lt;= 0x7) {<br>    return EFI_INVALID_PARAMETER;<br>  }<br>  Length     = (UINT16)((Length + 0x7) &amp; (~0x7));</p><p>  FreeMemory = HandOffHob-&gt;EfiFreeMemoryTop -<br>               HandOffHob-&gt;EfiFreeMemoryBottom;</p><p>  if (FreeMemory &lt; Length) {<br>    DEBUG ((EFI_D_ERROR, “PeiCreateHob fail: Length - 0x%08x\n”, (UINTN)Length));<br>    DEBUG ((EFI_D_ERROR, “  FreeMemoryTop    - 0x%08x\n”, (UINTN)HandOffHob-&gt;EfiFreeMemoryTop));<br>    DEBUG ((EFI_D_ERROR, “  FreeMemoryBottom - 0x%08x\n”, (UINTN)HandOffHob-&gt;EfiFreeMemoryBottom));<br>    return EFI_OUT_OF_RESOURCES;<br>  }</p><p>  <em>Hob = (VOID</em>) (UINTN) HandOffHob-&gt;EfiEndOfHobList;<br>  ((EFI_HOB_GENERIC_HEADER*) <em>Hob)-&gt;HobType   = Type;<br>  ((EFI_HOB_GENERIC_HEADER</em>) <em>Hob)-&gt;HobLength = Length;<br>  ((EFI_HOB_GENERIC_HEADER</em>) *Hob)-&gt;Reserved  = 0;</p><p>  HobEnd = (EFI_HOB_GENERIC_HEADER*) ((UINTN) *Hob + Length);<br>  HandOffHob-&gt;EfiEndOfHobList = (EFI_PHYSICAL_ADDRESS) (UINTN) HobEnd;</p><p>  HobEnd-&gt;HobType   = EFI_HOB_TYPE_END_OF_HOB_LIST;<br>  HobEnd-&gt;HobLength = (UINT16) sizeof (EFI_HOB_GENERIC_HEADER);<br>  HobEnd-&gt;Reserved  = 0;<br>  HobEnd++;<br>  HandOffHob-&gt;EfiFreeMemoryBottom = (EFI_PHYSICAL_ADDRESS) (UINTN) HobEnd;</p><p>  return EFI_SUCCESS;<br>} </p><pre><code>- ==MdePkg\Include\Pi\PiPeiCis.h==```c/**  This service, published by the PEI Foundation, abstracts the creation of a Hand-Off Block&#39;s (HOB&#39;s) headers.  @param  PeiServices      An indirect pointer to the EFI_PEI_SERVICES table published by the PEI Foundation.  @param  Type             The type of HOB to be installed.  @param  Length           The length of the HOB to be added.  @param  Hob              The address of a pointer that will contain the HOB header.  @retval EFI_SUCCESS           The HOB was successfully created.  @retval EFI_OUT_OF_RESOURCES  There is no additional space for HOB creation.**/typedefEFI_STATUS(EFIAPI *EFI_PEI_CREATE_HOB)(  IN CONST EFI_PEI_SERVICES            **PeiServices,  IN UINT16                            Type,  IN UINT16                            Length,  IN OUT VOID                          **Hob  );/// EFI_PEI_SERVICES is a collection of functions whose implementation is provided by the PEI/// Foundation. These services fall into various classes, including the following:/// - Managing the boot mode/// - Allocating both early and permanent memory/// - Supporting the Firmware File System (FFS)/// - Abstracting the PPI database abstraction/// - Creating Hand-Off Blocks (HOBs).///struct _EFI_PEI_SERVICES &#123;  ///  /// The table header for the PEI Services Table.  ///  EFI_TABLE_HEADER                Hdr;  //  // PPI Functions  //  EFI_PEI_INSTALL_PPI             InstallPpi;  EFI_PEI_REINSTALL_PPI           ReInstallPpi;  EFI_PEI_LOCATE_PPI              LocatePpi;  EFI_PEI_NOTIFY_PPI              NotifyPpi;  //  // Boot Mode Functions  //  EFI_PEI_GET_BOOT_MODE           GetBootMode;  EFI_PEI_SET_BOOT_MODE           SetBootMode;  //  // HOB Functions  //  EFI_PEI_GET_HOB_LIST            GetHobList;  EFI_PEI_CREATE_HOB              CreateHob;  //  // Firmware Volume Functions  //  EFI_PEI_FFS_FIND_NEXT_VOLUME2   FfsFindNextVolume;  EFI_PEI_FFS_FIND_NEXT_FILE2     FfsFindNextFile;  EFI_PEI_FFS_FIND_SECTION_DATA2  FfsFindSectionData;  //  // PEI Memory Functions  //  EFI_PEI_INSTALL_PEI_MEMORY      InstallPeiMemory;  EFI_PEI_ALLOCATE_PAGES          AllocatePages;  EFI_PEI_ALLOCATE_POOL           AllocatePool;  EFI_PEI_COPY_MEM                CopyMem;  EFI_PEI_SET_MEM                 SetMem;  //  // Status Code  //  EFI_PEI_REPORT_STATUS_CODE      ReportStatusCode;  //  // Reset  //  EFI_PEI_RESET_SYSTEM            ResetSystem;  //  // (the following interfaces are installed by publishing PEIM)  // I/O Abstractions  //  EFI_PEI_CPU_IO_PPI              *CpuIo;  EFI_PEI_PCI_CFG2_PPI            *PciCfg;  //  // Future Installed Services  //  EFI_PEI_FFS_FIND_BY_NAME        FfsFindFileByName;  EFI_PEI_FFS_GET_FILE_INFO       FfsGetFileInfo;  EFI_PEI_FFS_GET_VOLUME_INFO     FfsGetVolumeInfo;  EFI_PEI_REGISTER_FOR_SHADOW     RegisterForShadow;  EFI_PEI_FFS_FIND_SECTION_DATA3  FindSectionData3;  EFI_PEI_FFS_GET_FILE_INFO2      FfsGetFileInfo2;  EFI_PEI_RESET2_SYSTEM           ResetSystem2;  EFI_PEI_FREE_PAGES              FreePages;&#125;;</code></pre><ul><li><p>==MdeModulePkg\Core\Pei\PeiMain\PeiMain.c==</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/// Pei service instance</span><span class="token comment" spellcheck="true">///</span>EFI_PEI_SERVICES  gPs <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  PEI_SERVICES_SIGNATURE<span class="token punctuation">,</span>  PEI_SERVICES_REVISION<span class="token punctuation">,</span>  <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>EFI_PEI_SERVICES<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>PeiInstallPpi<span class="token punctuation">,</span>PeiReInstallPpi<span class="token punctuation">,</span>PeiLocatePpi<span class="token punctuation">,</span>PeiNotifyPpi<span class="token punctuation">,</span>PeiGetBootMode<span class="token punctuation">,</span>PeiSetBootMode<span class="token punctuation">,</span>PeiGetHobList<span class="token punctuation">,</span>PeiCreateHob<span class="token punctuation">,</span>PeiFfsFindNextVolume<span class="token punctuation">,</span>PeiFfsFindNextFile<span class="token punctuation">,</span>PeiFfsFindSectionData<span class="token punctuation">,</span>PeiInstallPeiMemory<span class="token punctuation">,</span>PeiAllocatePages<span class="token punctuation">,</span>PeiAllocatePool<span class="token punctuation">,</span><span class="token punctuation">(</span>EFI_PEI_COPY_MEM<span class="token punctuation">)</span>CopyMem<span class="token punctuation">,</span><span class="token punctuation">(</span>EFI_PEI_SET_MEM<span class="token punctuation">)</span>SetMem<span class="token punctuation">,</span>PeiReportStatusCode<span class="token punctuation">,</span>PeiResetSystem<span class="token punctuation">,</span><span class="token operator">&amp;</span>gPeiDefaultCpuIoPpi<span class="token punctuation">,</span><span class="token operator">&amp;</span>gPeiDefaultPciCfg2Ppi<span class="token punctuation">,</span>PeiFfsFindFileByName<span class="token punctuation">,</span>PeiFfsGetFileInfo<span class="token punctuation">,</span>PeiFfsGetVolumeInfo<span class="token punctuation">,</span>PeiRegisterForShadow<span class="token punctuation">,</span>PeiFfsFindSectionData3<span class="token punctuation">,</span>PeiFfsGetFileInfo2<span class="token punctuation">,</span>PeiResetSystem2<span class="token punctuation">,</span>PeiFreePages<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GetHobList-PEI阶段实现"><a href="#GetHobList-PEI阶段实现" class="headerlink" title="GetHobList(PEI阶段实现)"></a>GetHobList(PEI阶段实现)</h2></li><li><p>==MdeModulePkg\Core\Pei\PeiMain.h==</p><pre class="line-numbers language-c"><code class="language-c"><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>Gets the pointer to the HOB List<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>  @param PeiServices                   An indirect pointer to the EFI_PEI_SERVICES table published by the PEI Foundation.<br>  @param HobList                       Pointer to the HOB List.</p><p>  @retval EFI_SUCCESS                  Get the pointer of HOB List<br>  @retval EFI_NOT_AVAILABLE_YET        the HOB List is not yet published<br>  @retval EFI_INVALID_PARAMETER        HobList is NULL (in debug mode)</p><p>**/<br>EFI_STATUS<br>EFIAPI<br>PeiGetHobList (<br>  IN CONST EFI_PEI_SERVICES  **PeiServices,<br>  IN OUT VOID          **HobList<br>  );</p><pre><code>- ==MdeModulePkg\Core\Pei\Hob\Hob.c==```c /** Gets the pointer to the HOB List.@param PeiServices                   An indirect pointer to the EFI_PEI_SERVICES table published by the PEI Foundation.@param HobList                       Pointer to the HOB List.@retval EFI_SUCCESS                  Get the pointer of HOB List@retval EFI_NOT_AVAILABLE_YET        the HOB List is not yet published@retval EFI_INVALID_PARAMETER        HobList is NULL (in debug mode) **/EFI_STATUSEFIAPIPeiGetHobList (IN CONST EFI_PEI_SERVICES  **PeiServices,IN OUT VOID          **HobList)&#123;PEI_CORE_INSTANCE *PrivateData;//// Only check this parameter in debug mode//DEBUG_CODE_BEGIN ();  if (HobList == NULL) &#123;    return EFI_INVALID_PARAMETER;  &#125;DEBUG_CODE_END ();PrivateData = PEI_CORE_INSTANCE_FROM_PS_THIS(PeiServices);*HobList    = PrivateData-&gt;HobList.Raw;return EFI_SUCCESS;&#125;</code></pre><ul><li>==PeiMain.h==</li></ul><blockquote><p>==这个宏的作用是根据一个结构体成员变量的的地址获得该结构体基地址==</p></blockquote><p>定义形式：<br>#define _CR(Record, TYPE, Field) <br>((TYPE *) ((CHAR8 *) (Record) - (CHAR8 *) &amp;(((TYPE *) 0)-&gt;Field)))<br>功能是：找出TYPE类型结构体成员Field所在结构体的地址,Record是Field的地址。</p><p>具体实现：<br>1.(CHAR8 *) (Record)：Field的地址以CHAR8 *类型进行运算。</p><p>2.(CHAR8 *) &amp;(((TYPE *) 0)-&gt;Field))：重点就是(TYPE *) 0)了，ANSI C标准允许值为0的常量被强制转换成任何一种类型的指针，并且转换结果是一个NULL指针，因此((type *)0)的结果就是一个类型为type *的NULL指针。如果利用这NULL指针来访问type的成员当然是非法的，但&amp;( ((type *)0)-&gt;field )的意图仅仅是计算field字段的地址。聪明的编译器根本就不生成访问type的代码，而仅仅是根据type的内存布局和结构体实例首址在编译期计算这个（常量）地址，这样就完全避免了通过NULL指针访问内存的问题。又因为首址为0，所以这个地址的值就是字段相对于结构体基址的偏移。以上方法避免了实例化一个type对象，并且求值在编译期进行，没有运行期负担。这样，就得到了Field在它的结构体中的偏移地址并同样以CHAR8 *类型进行运算。</p><p> 3.((TYPE *) ：最后求得的地址转成原有结构体类型。<br>用1得到的变量地址减去2得到的变量偏移地址，得到的基地址通过3转换回原来的类型。大功告成！<br>重点就是  ((TYPE *) 0)-&gt;Field)。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">///</span><span class="token comment" spellcheck="true">/// Pei Core Instance Data Macros</span><span class="token comment" spellcheck="true">///</span><span class="token macro property">#<span class="token directive keyword">define</span> PEI_CORE_INSTANCE_FROM_PS_THIS(a) \ CR(a, PEI_CORE_INSTANCE, Ps, PEI_CORE_HANDLE_SIGNATURE)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GetHobList-DXE阶段实现"><a href="#GetHobList-DXE阶段实现" class="headerlink" title="GetHobList(DXE阶段实现)"></a>GetHobList(DXE阶段实现)</h2><ul><li>==MdePkg\Library\DxeHobLib\HobLib.c==</li></ul><pre class="line-numbers language-c"><code class="language-c">VOID  <span class="token operator">*</span>mHobList <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  Returns the pointer to the HOB list.  This function returns the pointer to first HOB in the list.  For PEI phase, the PEI service GetHobList() can be used to retrieve the pointer  to the HOB list.  For the DXE phase, the HOB list pointer can be retrieved through  the EFI System Table by looking up theHOB list GUID in the System Configuration Table.  Since the System Configuration Table does not exist that the time the DXE Core is  launched, the DXE Core uses a global variable from the DXE Core Entry Point Library  to manage the pointer to the HOB list.  If the pointer to the HOB list is NULL, then ASSERT().  This function also caches the pointer to the HOB list retrieved.  @return The pointer to the HOB list.**/</span>VOID <span class="token operator">*</span>EFIAPI<span class="token function">GetHobList</span> <span class="token punctuation">(</span>  VOID  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  EFI_STATUS  Status<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mHobList <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Status <span class="token operator">=</span> <span class="token function">EfiGetSystemConfigurationTable</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>gEfiHobListGuid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mHobList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT_EFI_ERROR</span> <span class="token punctuation">(</span>Status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ASSERT</span> <span class="token punctuation">(</span>mHobList <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> mHobList<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Retrieves a pointer to the system configuration table from the EFI System Table  based on a specified GUID.  This function searches the list of configuration tables stored in the EFI System Table  for a table with a GUID that matches TableGuid.  If a match is found, then a pointer to  the configuration table is returned in Table., and EFI_SUCCESS is returned. If a matching GUID  is not found, then EFI_NOT_FOUND is returned.  If TableGuid is NULL, then ASSERT().  If Table is NULL, then ASSERT().  @param  TableGuid       The pointer to table's GUID type.  @param  Table           The pointer to the table associated with TableGuid in the EFI System Table.  @retval EFI_SUCCESS     A configuration table matching TableGuid was found.  @retval EFI_NOT_FOUND   A configuration table matching TableGuid could not be found.**/</span>EFI_STATUSEFIAPI<span class="token function">EfiGetSystemConfigurationTable</span> <span class="token punctuation">(</span>  IN  EFI_GUID  <span class="token operator">*</span>TableGuid<span class="token punctuation">,</span>  OUT VOID      <span class="token operator">*</span><span class="token operator">*</span>Table  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  EFI_SYSTEM_TABLE  <span class="token operator">*</span>SystemTable<span class="token punctuation">;</span>  UINTN             Index<span class="token punctuation">;</span>  <span class="token function">ASSERT</span> <span class="token punctuation">(</span>TableGuid <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ASSERT</span> <span class="token punctuation">(</span>Table <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  SystemTable <span class="token operator">=</span> gST<span class="token punctuation">;</span>  <span class="token operator">*</span>Table <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> Index <span class="token operator">&lt;</span> SystemTable<span class="token operator">-></span>NumberOfTableEntries<span class="token punctuation">;</span> Index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">CompareGuid</span> <span class="token punctuation">(</span>TableGuid<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>SystemTable<span class="token operator">-></span>ConfigurationTable<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>VendorGuid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">*</span>Table <span class="token operator">=</span> SystemTable<span class="token operator">-></span>ConfigurationTable<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">.</span>VendorTable<span class="token punctuation">;</span>      <span class="token keyword">return</span> EFI_SUCCESS<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> EFI_NOT_FOUND<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GetNextHob"><a href="#GetNextHob" class="headerlink" title="GetNextHob"></a>GetNextHob</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Returns the next instance of a HOB type from the starting HOB.  This function searches the first instance of a HOB type from the starting HOB pointer.  If there does not exist such HOB type from the starting HOB pointer, it will return NULL.  In contrast with macro GET_NEXT_HOB(), this function does not skip the starting HOB pointer  unconditionally: it returns HobStart back if HobStart itself meets the requirement;  caller is required to use GET_NEXT_HOB() if it wishes to skip current HobStart.  If HobStart is NULL, then ASSERT().  @param  Type          The HOB type to return.  @param  HobStart      The starting HOB pointer to search from.  @return The next instance of a HOB type from the starting HOB.**/</span>VOID <span class="token operator">*</span>EFIAPI<span class="token function">GetNextHob</span> <span class="token punctuation">(</span>  IN UINT16                 Type<span class="token punctuation">,</span>  IN CONST VOID             <span class="token operator">*</span>HobStart  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  EFI_PEI_HOB_POINTERS  Hob<span class="token punctuation">;</span>  <span class="token function">ASSERT</span> <span class="token punctuation">(</span>HobStart <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Hob<span class="token punctuation">.</span>Raw <span class="token operator">=</span> <span class="token punctuation">(</span>UINT8 <span class="token operator">*</span><span class="token punctuation">)</span> HobStart<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token comment" spellcheck="true">// Parse the HOB list until end of list or matching type is found.</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">END_OF_HOB_LIST</span> <span class="token punctuation">(</span>Hob<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hob<span class="token punctuation">.</span>Header<span class="token operator">-></span>HobType <span class="token operator">==</span> Type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Hob<span class="token punctuation">.</span>Raw<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Hob<span class="token punctuation">.</span>Raw <span class="token operator">=</span> <span class="token function">GET_NEXT_HOB</span> <span class="token punctuation">(</span>Hob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GetFirstHob"><a href="#GetFirstHob" class="headerlink" title="GetFirstHob"></a>GetFirstHob</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Returns the first instance of a HOB type among the whole HOB list.  This function searches the first instance of a HOB type among the whole HOB list.  If there does not exist such HOB type in the HOB list, it will return NULL.  If the pointer to the HOB list is NULL, then ASSERT().  @param  Type          The HOB type to return.  @return The next instance of a HOB type from the starting HOB.**/</span>VOID <span class="token operator">*</span>EFIAPI<span class="token function">GetFirstHob</span> <span class="token punctuation">(</span>  IN UINT16                 Type  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  VOID      <span class="token operator">*</span>HobList<span class="token punctuation">;</span>  HobList <span class="token operator">=</span> <span class="token function">GetHobList</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">GetNextHob</span> <span class="token punctuation">(</span>Type<span class="token punctuation">,</span> HobList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GetNextGuidHob"><a href="#GetNextGuidHob" class="headerlink" title="GetNextGuidHob"></a>GetNextGuidHob</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Returns the next instance of the matched GUID HOB from the starting HOB.  This function searches the first instance of a HOB from the starting HOB pointer.  Such HOB should satisfy two conditions:  its HOB type is EFI_HOB_TYPE_GUID_EXTENSION and its GUID Name equals to the input Guid.  If there does not exist such HOB from the starting HOB pointer, it will return NULL.  Caller is required to apply GET_GUID_HOB_DATA () and GET_GUID_HOB_DATA_SIZE ()  to extract the data section and its size information, respectively.  In contrast with macro GET_NEXT_HOB(), this function does not skip the starting HOB pointer  unconditionally: it returns HobStart back if HobStart itself meets the requirement;  caller is required to use GET_NEXT_HOB() if it wishes to skip current HobStart.  If Guid is NULL, then ASSERT().  If HobStart is NULL, then ASSERT().  @param  Guid          The GUID to match with in the HOB list.  @param  HobStart      A pointer to a Guid.  @return The next instance of the matched GUID HOB from the starting HOB.**/</span>VOID <span class="token operator">*</span>EFIAPI<span class="token function">GetNextGuidHob</span> <span class="token punctuation">(</span>  IN CONST EFI_GUID         <span class="token operator">*</span>Guid<span class="token punctuation">,</span>  IN CONST VOID             <span class="token operator">*</span>HobStart  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  EFI_PEI_HOB_POINTERS  GuidHob<span class="token punctuation">;</span>  GuidHob<span class="token punctuation">.</span>Raw <span class="token operator">=</span> <span class="token punctuation">(</span>UINT8 <span class="token operator">*</span><span class="token punctuation">)</span> HobStart<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>GuidHob<span class="token punctuation">.</span>Raw <span class="token operator">=</span> <span class="token function">GetNextHob</span> <span class="token punctuation">(</span>EFI_HOB_TYPE_GUID_EXTENSION<span class="token punctuation">,</span> GuidHob<span class="token punctuation">.</span>Raw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">CompareGuid</span> <span class="token punctuation">(</span>Guid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GuidHob<span class="token punctuation">.</span>Guid<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    GuidHob<span class="token punctuation">.</span>Raw <span class="token operator">=</span> <span class="token function">GET_NEXT_HOB</span> <span class="token punctuation">(</span>GuidHob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> GuidHob<span class="token punctuation">.</span>Raw<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GetFirstGuidHob"><a href="#GetFirstGuidHob" class="headerlink" title="GetFirstGuidHob"></a>GetFirstGuidHob</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Returns the first instance of the matched GUID HOB among the whole HOB list.  This function searches the first instance of a HOB among the whole HOB list.  Such HOB should satisfy two conditions:  its HOB type is EFI_HOB_TYPE_GUID_EXTENSION and its GUID Name equals to the input Guid.  If there does not exist such HOB from the starting HOB pointer, it will return NULL.  Caller is required to apply GET_GUID_HOB_DATA () and GET_GUID_HOB_DATA_SIZE ()  to extract the data section and its size information, respectively.  If the pointer to the HOB list is NULL, then ASSERT().  If Guid is NULL, then ASSERT().  @param  Guid          The GUID to match with in the HOB list.  @return The first instance of the matched GUID HOB among the whole HOB list.**/</span>VOID <span class="token operator">*</span>EFIAPI<span class="token function">GetFirstGuidHob</span> <span class="token punctuation">(</span>  IN CONST EFI_GUID         <span class="token operator">*</span>Guid  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  VOID      <span class="token operator">*</span>HobList<span class="token punctuation">;</span>  HobList <span class="token operator">=</span> <span class="token function">GetHobList</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">GetNextGuidHob</span> <span class="token punctuation">(</span>Guid<span class="token punctuation">,</span> HobList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="HOB生产消费流程"><a href="#HOB生产消费流程" class="headerlink" title="HOB生产消费流程"></a>HOB生产消费流程</h1><h2 id="PHIT-HOB的建立"><a href="#PHIT-HOB的建立" class="headerlink" title="PHIT HOB的建立"></a>PHIT HOB的建立</h2><ul><li> ==MdeModulePkg\Core\Pei\Hob\Hob.c==</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  Builds a Handoff Information Table HOB  @param BootMode        - Current Bootmode  @param MemoryBegin     - Start Memory Address.  @param MemoryLength    - Length of Memory.  @return EFI_SUCCESS Always success to initialize HOB.**/</span>EFI_STATUS<span class="token function">PeiCoreBuildHobHandoffInfoTable</span> <span class="token punctuation">(</span>  IN EFI_BOOT_MODE         BootMode<span class="token punctuation">,</span>  IN EFI_PHYSICAL_ADDRESS  MemoryBegin<span class="token punctuation">,</span>  IN UINT64                MemoryLength  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  EFI_HOB_HANDOFF_INFO_TABLE   <span class="token operator">*</span>Hob<span class="token punctuation">;</span>  EFI_HOB_GENERIC_HEADER       <span class="token operator">*</span>HobEnd<span class="token punctuation">;</span>  Hob                      <span class="token operator">=</span> <span class="token punctuation">(</span>VOID <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>UINTN<span class="token punctuation">)</span>MemoryBegin<span class="token punctuation">;</span>  HobEnd                   <span class="token operator">=</span> <span class="token punctuation">(</span>EFI_HOB_GENERIC_HEADER<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Hob<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Hob<span class="token operator">-></span>Header<span class="token punctuation">.</span>HobType      <span class="token operator">=</span> EFI_HOB_TYPE_HANDOFF<span class="token punctuation">;</span>  Hob<span class="token operator">-></span>Header<span class="token punctuation">.</span>HobLength    <span class="token operator">=</span> <span class="token punctuation">(</span>UINT16<span class="token punctuation">)</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>EFI_HOB_HANDOFF_INFO_TABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  Hob<span class="token operator">-></span>Header<span class="token punctuation">.</span>Reserved     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  HobEnd<span class="token operator">-></span>HobType          <span class="token operator">=</span> EFI_HOB_TYPE_END_OF_HOB_LIST<span class="token punctuation">;</span>  HobEnd<span class="token operator">-></span>HobLength        <span class="token operator">=</span> <span class="token punctuation">(</span>UINT16<span class="token punctuation">)</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>EFI_HOB_GENERIC_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>  HobEnd<span class="token operator">-></span>Reserved         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  Hob<span class="token operator">-></span>Version             <span class="token operator">=</span> EFI_HOB_HANDOFF_TABLE_VERSION<span class="token punctuation">;</span>  Hob<span class="token operator">-></span>BootMode            <span class="token operator">=</span> BootMode<span class="token punctuation">;</span>  Hob<span class="token operator">-></span>EfiMemoryTop        <span class="token operator">=</span> MemoryBegin <span class="token operator">+</span> MemoryLength<span class="token punctuation">;</span>  Hob<span class="token operator">-></span>EfiMemoryBottom     <span class="token operator">=</span> MemoryBegin<span class="token punctuation">;</span>  Hob<span class="token operator">-></span>EfiFreeMemoryTop    <span class="token operator">=</span> MemoryBegin <span class="token operator">+</span> MemoryLength<span class="token punctuation">;</span>  Hob<span class="token operator">-></span>EfiFreeMemoryBottom <span class="token operator">=</span> <span class="token punctuation">(</span>EFI_PHYSICAL_ADDRESS<span class="token punctuation">)</span> <span class="token punctuation">(</span>UINTN<span class="token punctuation">)</span> <span class="token punctuation">(</span>HobEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Hob<span class="token operator">-></span>EfiEndOfHobList     <span class="token operator">=</span> <span class="token punctuation">(</span>EFI_PHYSICAL_ADDRESS<span class="token punctuation">)</span> <span class="token punctuation">(</span>UINTN<span class="token punctuation">)</span> HobEnd<span class="token punctuation">;</span>  <span class="token keyword">return</span> EFI_SUCCESS<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>头和尾HOB建立后，CreateHob会覆盖尾HOB，再将尾HOB后移，此时PEI阶段的模块会相继创建各种类型的HOB，我们可以在PEI阶段自己创建HOB传递一些数据，也可以在PEI和DXE阶段找到感兴趣的HOB块，对其BLOCK数据块进行操作，但是理论上在DXE阶段使用Get方法，不建议在PEI阶段使用，是因为不确定Get的HOB是否已经建立，即无法判断两个Pei ModulePart的执行顺序，当然也可以通过Deepx来限定ModulePart跑的顺序</p></blockquote><hr><h1 id="作业Demo"><a href="#作业Demo" class="headerlink" title="作业Demo"></a>作业Demo</h1><p><img src="./images/1602756011241.png" alt="HOB Homework"></p><ul><li>==OemHob.h==</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token operator">/</span><span class="token comment" spellcheck="true">/***********************************************************************//*                                                                     *//*   Copyright (c) 1985-2019, American Megatrends International LLC.   *//*                                                                     *//*      All rights reserved. Subject to AMI licensing agreement.       *//*                                                                     *//***********************************************************************#ifndef __OEM_HOB_H__#define __OEM_HOB_H__#ifdef __cplusplusextern "C" &amp;#123;#endif#define OEM_HOB_GUID \    &amp;#123;0xe73e6c2b, 0xaa9a, 0x4b51, 0x94, 0x56, 0x50, 0xd2, 0x8b, 0xcc, 0x57, 0xf3&amp;#125;typedef struct _OEM_HOB&amp;#123;       EFI_HOB_GUID_TYPE GuidExtension;    CHAR8 OemString[10];    UINT16 MemorySpace;  &amp;#125; OEM_HOB;/****** DO NOT WRITE BELOW THIS LINE *******/</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>==PeiCreateHob.c==<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//***********************************************************************</span><span class="token comment" spellcheck="true">//*                                                                     *</span><span class="token comment" spellcheck="true">//*   Copyright (c) 1985-2019, American Megatrends International LLC.   *</span><span class="token comment" spellcheck="true">//*                                                                     *</span><span class="token comment" spellcheck="true">//*      All rights reserved. Subject to AMI licensing agreement.       *</span><span class="token comment" spellcheck="true">//*                                                                     *</span><span class="token comment" spellcheck="true">//***********************************************************************</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>#include &lt;AmiPeiLib.h&gt;<br>#include &lt;Library/PeiServicesLib.h&gt;<br>#include &lt;Library/HobLib.h&gt;<br>#include &lt;OemHob.h&gt;<br>#include &lt;MemInfoHob.h&gt;</p><p>extern EFI_GUID gSiMemoryInfoDataGuid;</p><p>EFI_STATUS PeiCreateHobEntryPoint(<br>   IN EFI_PEI_FILE_HANDLE   FileHandle,<br>   IN CONST EFI_PEI_SERVICES  **PeiServices<br>)<br>{<br>    EFI_STATUS    Status = EFI_SUCCESS;<br>    OEM_HOB       *pHob     = NULL;<br>    VOID          *Memory_Hob  = NULL;<br>    EFI_GUID      OemHobGuid = OEM_HOB_GUID;<br>    EFI_GUID      MemoryInfoDataGuid = gSiMemoryInfoDataGuid;<br>    //CHAR8         BIOSVersion[] = CONVERT_TO_STRING(PLATFORM_NAME);<br>    CHAR8         BIOSVersion[10]=”kabylake”;<br>    UINT16        MemorySize = 0;</p><pre><code>// Get physical address bits supported.Memory_Hob = GetFirstGuidHob(&amp;MemoryInfoDataGuid);if (Memory_Hob != NULL) &#123;    MemorySize = ((MEMORY_INFO_DATA_HOB *) Memory_Hob)-&gt;TotalPhysicalMemorySize;    DEBUG((-1,&quot;\nElder has been got MemoryInfoDataHob in Pei Phase!&quot;));    DEBUG((-1,&quot;\nMemoryInfoDataHob Address : %p&quot;,Memory_Hob));  &#125; //create HOB for DXEStatus = (*PeiServices)-&gt;CreateHob (PeiServices,                                    EFI_HOB_TYPE_GUID_EXTENSION,                                     sizeof(OEM_HOB),                                     &amp;pHob);if (!EFI_ERROR(Status))&#123;       pHob-&gt;GuidExtension.Name = OemHobGuid;       Strcpy(pHob-&gt;OemString,BIOSVersion);       pHob-&gt;MemorySpace = MemorySize;                  DEBUG((-1,&quot;\nElder has been Created OemHob Success in Pei Phase!&quot;));              &#125;return EFI_SUCCESS;</code></pre><p>}</p><pre><code>- ==DxeFindHob.c==```c//***********************************************************************//*                                                                     *//*   Copyright (c) 1985-2019, American Megatrends International LLC.   *//*                                                                     *//*      All rights reserved. Subject to AMI licensing agreement.       *//*                                                                     *//***********************************************************************#include &lt;AmiDxeLib.h&gt;#include &lt;Library/HobLib.h&gt;#include &lt;OemHob.h&gt;EFI_STATUS DxeFindHobEntryPoint(    IN EFI_HANDLE ImageHandle,    IN EFI_SYSTEM_TABLE *SystemTable)&#123;    EFI_STATUS      Status = EFI_SUCCESS;    EFI_GUID        OemHobGuid = OEM_HOB_GUID;    OEM_HOB         *pHob = NULL;    InitAmiLib (ImageHandle , SystemTable) ;    pHob = (OEM_HOB*)GetFirstGuidHob (&amp;OemHobGuid);    if (pHob == NULL)        &#123;            DEBUG((-1,&quot;\n Elder Dxe Phase return OemHob Data Error!\n&quot;));        &#125;    else        &#123;            DEBUG((-1,&quot;\n Elder OemHob Address = %p\n&quot;,pHob));                DEBUG((-1,&quot;\n Elder Dxe Phase has been got HobData OemString = %s\n&quot;,pHob-&gt;OemString));            DEBUG((-1,&quot;\n Elder Dxe Phase has been got HobData MemorySpace = %d MB\n&quot;,pHob-&gt;MemorySpace));        &#125;    return EFI_SUCCESS;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 概念,code,数据结构,使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/28/hello-world/"/>
      <url>2020/10/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
